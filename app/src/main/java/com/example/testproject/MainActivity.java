package com.example.testproject;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.annotation.SuppressLint;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.text.SpannableString;import android.text.style.ForegroundColorSpan;import android.util.Log;import android.view.Gravity;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.Toast;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;public class MainActivity extends AppCompatActivity {    // Variables    private RecyclerView recyclerView;    private RecyclerView.Adapter mAdapter;    private RecyclerView.LayoutManager layoutManager;    private static final String TAG = "D&D Helper";    Button btn_addOne, btn_next, btn_prev;    MyApplication myApplication = (MyApplication) this.getApplication();    List<Combatant> CombatantList;    public void hidePrompText(){        if (!CombatantList.isEmpty()){            findViewById(R.id.tv_prompt1).setVisibility(View.INVISIBLE);            findViewById(R.id.tv_prompt2).setVisibility(View.INVISIBLE);            findViewById(R.id.tv_prompt3).setVisibility(View.INVISIBLE);            findViewById(R.id.tv_prompt4).setVisibility(View.INVISIBLE);            findViewById(R.id.tv_prompt).setVisibility(View.INVISIBLE);            findViewById(R.id.tv_prompt5).setVisibility(View.INVISIBLE);        }    }    private void generateList() {        // get global list        CombatantList = myApplication.getCombatantList();        // remove background text        hidePrompText();        // sort list        Collections.sort(CombatantList, (Combatant c1, Combatant c2) -> c2.getM_ini()-c1.getM_ini());    }    /**     *  Moves focus ip or down to the next item in the list     *     * @param dir - The direction to move focus ( < 0 = down, > 0 = up)     */    private void changePlaces(int dir){        if (myApplication.currInitPos == 0 && dir < 0){            myApplication.currInitPos = CombatantList.size()-1;            recyclerView.smoothScrollToPosition(myApplication.currInitPos);        }        else if (myApplication.currInitPos == CombatantList.size()-1 && dir > 0){            myApplication.currInitPos =0;            recyclerView.smoothScrollToPosition(myApplication.currInitPos);        }        else{            myApplication.currInitPos = myApplication.currInitPos + dir;            recyclerView.smoothScrollToPosition(myApplication.currInitPos);        }        mAdapter.notifyDataSetChanged();    }    private void loadList(){        myApplication.currInitPos = 0;        Database database = new Database(MainActivity.this);        if (!CombatantList.isEmpty()){            // delete current list            CombatantList.clear();        }        // load in saved list        myApplication.setCombatantList(database.loadCombatants());        // refresh        finish();        overridePendingTransition(0, 0);        startActivity(getIntent());        overridePendingTransition(0, 0);        Toast toast = Toast.makeText(MainActivity.this, "Loaded " + myApplication.getCombatantList().size() + " Combatants", Toast.LENGTH_SHORT);        toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);        toast.show();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        // page set up        generateList();        recyclerView = findViewById(R.id.lv_initList);        recyclerView.setHasFixedSize(true);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        mAdapter = new RecycleViewAdapter(CombatantList, MainActivity.this);        recyclerView.setAdapter(mAdapter);        // show debug info        Log.d(TAG, "onCreate: " + CombatantList.toString());        //Toast toast = Toast.makeText(this, "Total Combatants: " + CombatantList.size(), Toast.LENGTH_SHORT);        //toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);        //toast.show();        /**         * Add Combatant button logic         */        btn_addOne = findViewById(R.id.btn_addone);        btn_addOne.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view){                Intent intent = new Intent( MainActivity.this, AddEntity.class);                startActivity(intent);            }        });        /**         * move to next Combatant button logic ------------------------------------------------------         */        btn_next = findViewById(R.id.btn_next);        btn_next.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                changePlaces(1);            }        });        /**         * move to prev combatant button logic-------------------------------------------------------         */        btn_prev = findViewById(R.id.btn_back);        btn_prev.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                changePlaces(-1);            }        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.tracker_menu,menu);        // https://stackoverflow.com/questions/3519277/how-to-change-the-text-color-of-menu-item-in-android        // Code Credit ^^        MenuItem item2 = menu.getItem(2);        SpannableString s2 = new SpannableString("Clear List");        s2.setSpan(new ForegroundColorSpan(Color.parseColor("#FF5722")), 0, s2.length(), 0);        item2.setTitle(s2);        MenuItem item3 = menu.getItem(3);        SpannableString s3 = new SpannableString("Load List");        s3.setSpan(new ForegroundColorSpan(Color.parseColor("#FF5722")), 0, s3.length(), 0);        item3.setTitle(s3);        MenuItem item4 = menu.getItem(4);        SpannableString s4 = new SpannableString("Save List");        s4.setSpan(new ForegroundColorSpan(Color.parseColor("#FF5722")), 0, s4.length(), 0);        item4.setTitle(s4);        return true;    }    @SuppressLint("NonConstantResourceId")    @Override    public boolean onOptionsItemSelected(@NonNull MenuItem item) {        Intent intent;        switch(item.getItemId()){            case R.id.tMenu_home:                intent = new Intent( MainActivity.this, LandingPage.class);                startActivity(intent);                break;            case R.id.tMenu_roller:                intent = new Intent( MainActivity.this, DiceRoller.class);                startActivity(intent);                break;            case R.id.tMenu_save:                if (CombatantList.isEmpty()){                    Toast toast = Toast.makeText(this, "No Combatants to add" , Toast.LENGTH_SHORT);                    toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);                    toast.show();                }                else{                    // create confirmation menu                    AlertDialog.Builder alertSave = new AlertDialog.Builder(this);                        alertSave.setTitle("Confirm Action");                        alertSave.setMessage("Are you sure? Saving will overwrite any previously saved lists!");                        alertSave.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialogInterface, int i) {                                // if Yes Selected                                Database database = new Database(MainActivity.this);                                int deleteOld = database.deleteTable();                                boolean success = database.addCombatantList(CombatantList);                                if (success){                                    Toast toast = Toast.makeText(MainActivity.this, "Save Successful", Toast.LENGTH_SHORT);                                    toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);                                    toast.show();                                }                                else{                                    Toast toast = Toast.makeText(MainActivity.this, "Save Unsuccessful - Try Again", Toast.LENGTH_SHORT);                                    toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);                                    toast.show();                                }                            }                        });                        alertSave.setNegativeButton("No", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialogInterface, int i) {                                // if No Selected                            }                        });                        alertSave.create().show();                }                break;            case R.id.tMenu_load:                if (CombatantList.isEmpty()){                    loadList();                }                else{                    // create confirmation menu                    AlertDialog.Builder alertLoad = new AlertDialog.Builder(this);                    alertLoad.setTitle("Confirm Action");                    alertLoad.setMessage("Are you sure? Loading a saved list will clear the current list!");                    alertLoad.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            // if Yes Selected                            loadList();                        }                    });                    alertLoad.setNegativeButton("No", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            // if No Selected                        }                    });                    alertLoad.create().show();                }                break;            case R.id.tMenu_clear:                if (CombatantList.isEmpty()){                    Toast toast = Toast.makeText(this, "No Combatants Remove" , Toast.LENGTH_SHORT);                    toast.setGravity(Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 250);                    toast.show();                }                else{                    // create confirmation menu                    AlertDialog.Builder alertClear = new AlertDialog.Builder(this);                    alertClear.setTitle("Confirm Action");                    alertClear.setMessage("Are you sure you want to clear the current list?");                    alertClear.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            // if Yes Selected clear list                            CombatantList.clear();                            // refresh                            finish();                            overridePendingTransition(0, 0);                            startActivity(getIntent());                            overridePendingTransition(0, 0);                        }                    });                    alertClear.setNegativeButton("No", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            // if No Selected                        }                    });                    alertClear.create().show();                }                break;        }        return super.onOptionsItemSelected(item);    }}